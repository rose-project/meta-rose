From a3cf7a1daf24a16644f6e7d972a1a48ab49b45f1 Mon Sep 17 00:00:00 2001
From: Christian Fries <christian.fries123@gmail.com>
Date: Tue, 23 Aug 2016 14:46:36 +0200
Subject: [PATCH] add parameter to exclude directories

---
 misc/create_inode.c | 46 ++++++++++++++++++++++++++++++++++++++++++----
 misc/create_inode.h |  3 ++-
 misc/mke2fs.c       | 12 +++++++++---
 3 files changed, 53 insertions(+), 8 deletions(-)

diff --git a/misc/create_inode.c b/misc/create_inode.c
index 0de5719..6436b61 100644
--- a/misc/create_inode.c
+++ b/misc/create_inode.c
@@ -681,7 +681,8 @@ out:
 /* Copy files from source_dir to fs */
 static errcode_t __populate_fs(ext2_filsys fs, ext2_ino_t parent_ino,
 			       const char *source_dir, ext2_ino_t root,
-			       struct hdlinks_s *hdlinks)
+			       struct hdlinks_s *hdlinks,
+			       const char *exclude_dirs)
 {
 	const char	*name;
 	DIR		*dh;
@@ -693,6 +694,8 @@ static errcode_t __populate_fs(ext2_filsys fs, ext2_ino_t parent_ino,
 	errcode_t	retval = 0;
 	int		read_cnt;
 	int		hdlink;
+	char           	*excpy, *token;
+	char		*exclude_buf = 0;
 
 	if (chdir(source_dir) < 0) {
 		retval = errno;
@@ -708,11 +711,19 @@ static errcode_t __populate_fs(ext2_filsys fs, ext2_ino_t parent_ino,
 			_("while opening directory \"%s\""), source_dir);
 		return retval;
 	}
+	
+	if(exclude_dirs)
+	{
+		exclude_buf = malloc(strlen(exclude_dirs) + 1);
+		memset(exclude_buf, "\0", sizeof(exclude_buf));
+
+	}
 
 	while ((dent = readdir(dh))) {
 		if ((!strcmp(dent->d_name, ".")) ||
 		    (!strcmp(dent->d_name, "..")))
 			continue;
+		
 		if (lstat(dent->d_name, &st)) {
 			retval = errno;
 			com_err(__func__, retval, _("while lstat \"%s\""),
@@ -802,7 +813,31 @@ find_lnf:
 					goto out;
 			}
 			/* Populate the dir recursively*/
-			retval = __populate_fs(fs, ino, name, root, hdlinks);
+			
+			if(exclude_dirs)
+			{
+				int dontCopy = 0;
+				excpy = strdup(exclude_dirs);
+				while(token = strsep(&excpy, ","))
+				{
+					if(!strcmp(name, token))
+					{
+						dontCopy = 1;
+					}
+					else if(!strncmp(name, token, strlen(name)))
+					{
+						if(strlen(exclude_buf) > 0)
+						{
+							strcat(exclude_buf,",");
+						}
+						strcat(exclude_buf, token + strlen(name) + 1);
+					} 
+				} if(excpy) free(excpy);
+				if(dontCopy)	// exclude copy content of this dir!
+					break;
+			}
+			
+			retval = __populate_fs(fs, ino, name, root, hdlinks, exclude_buf);
 			if (retval)
 				goto out;
 			if (chdir("..")) {
@@ -866,12 +901,15 @@ find_lnf:
 	}
 
 out:
+	if(exclude_buf)
+		free(exclude_buf);
 	closedir(dh);
 	return retval;
 }
 
 errcode_t populate_fs(ext2_filsys fs, ext2_ino_t parent_ino,
-		      const char *source_dir, ext2_ino_t root)
+		      const char *source_dir, ext2_ino_t root,
+	              const char *exclude_dirs)
 {
 	struct hdlinks_s hdlinks;
 	errcode_t retval;
@@ -890,7 +928,7 @@ errcode_t populate_fs(ext2_filsys fs, ext2_ino_t parent_ino,
 		return retval;
 	}
 
-	retval = __populate_fs(fs, parent_ino, source_dir, root, &hdlinks);
+	retval = __populate_fs(fs, parent_ino, source_dir, root, &hdlinks, exclude_dirs);
 
 	free(hdlinks.hdl);
 	return retval;
diff --git a/misc/create_inode.h b/misc/create_inode.h
index cf49df2..180d179 100644
--- a/misc/create_inode.h
+++ b/misc/create_inode.h
@@ -26,7 +26,8 @@ struct hdlinks_s
 
 /* For populating the filesystem */
 extern errcode_t populate_fs(ext2_filsys fs, ext2_ino_t parent_ino,
-			     const char *source_dir, ext2_ino_t root);
+			     const char *source_dir, ext2_ino_t root,
+			     const char *exclude_dirs);
 extern errcode_t do_mknod_internal(ext2_filsys fs, ext2_ino_t cwd,
 				   const char *name, struct stat *st);
 extern errcode_t do_symlink_internal(ext2_filsys fs, ext2_ino_t cwd,
diff --git a/misc/mke2fs.c b/misc/mke2fs.c
index dd467f2..50b0a70 100644
--- a/misc/mke2fs.c
+++ b/misc/mke2fs.c
@@ -110,6 +110,7 @@ char *journal_device;
 static int sync_kludge;	/* Set using the MKE2FS_SYNC env. option */
 char **fs_types;
 const char *src_root_dir;  /* Copy files from the specified directory */
+const char *exclude_dirs = 0;  /* Copy files from the specified directory */
 static char *undo_file;
 
 static profile_t	profile;
@@ -131,7 +132,8 @@ static void usage(void)
 	"[-r fs-revision] [-E extended-option[,...]]\n"
 	"\t[-t fs-type] [-T usage-type ] [-U UUID] [-e errors_behavior]"
 	"[-z undo_file]\n"
-	"\t[-jnqvDFKSV] device [blocks-count]\n"),
+	"\t[-jnqvDFKSV] device [blocks-count]\n"
+	"\t[-w exclude_dirs] without directories, comma separated list\n"),
 		program_name);
 	exit(1);
 }
@@ -1453,6 +1455,7 @@ static void PRS(int argc, char *argv[])
 	char *		extended_opts = 0;
 	char *		fs_type = 0;
 	char *		usage_types = 0;
+
 	/*
 	 * NOTE: A few words about fs_blocks_count and blocksize:
 	 *
@@ -1547,7 +1550,7 @@ profile_error:
 	}
 
 	while ((c = getopt (argc, argv,
-		    "b:cd:e:g:i:jl:m:no:qr:s:t:vC:DE:FG:I:J:KL:M:N:O:R:ST:U:Vz:")) != EOF) {
+		    "b:cd:e:g:i:jl:m:no:qr:s:t:vw:C:DE:FG:I:J:KL:M:N:O:R:ST:U:Vz:")) != EOF) {
 		switch (c) {
 		case 'b':
 			blocksize = parse_num_blocks2(optarg, -1);
@@ -1769,6 +1772,9 @@ profile_error:
 			/* Print version number and exit */
 			show_version_only++;
 			break;
+		case 'w':
+			exclude_dirs = strdup(optarg);
+			break;
 		case 'z':
 			undo_file = optarg;
 			break;
@@ -3111,7 +3117,7 @@ no_journal:
 			printf("%s", _("Copying files into the device: "));
 
 		retval = populate_fs(fs, EXT2_ROOT_INO, src_root_dir,
-				     EXT2_ROOT_INO);
+				     EXT2_ROOT_INO, exclude_dirs);
 		if (retval) {
 			com_err(program_name, retval, "%s",
 				_("while populating file system"));
-- 
2.7.4

